version: 2.1
commands:
  install_aws_cli:
    description: install AWS cli
    steps:
      - run:
          name: install aws cli
          command: |
            sudo apt install unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    description: install ansible
    steps:
      - run:
          name: install ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible
  destroy-environments:
    description: Destroy backend and frontend cloudformation stacks for a given id.
    parameters:
      when:
        type: string
        default: on_fail
      id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: <<parameters.when>>
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.id>> \
            & aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.id>>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          working_directory: ./backend
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_<<parameters.id>>)
            if (( $SUCCESS == 1 ));
              then
              npm install
              npm run migrations:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependency]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-dependency
  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependency]
      - run:
          name: Back-end build
          command: "cd backend\nnpm install \nnpm run build\n"
      - save_cache:
          paths: [backend/node_modules]
          key: backend-dependency
  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependency]
      - run:
          name: frontend unit test
          command: |
            cd frontend
            npm install
            npm test
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependency]
      - run:
          name: Back-end unit test
          command: |
            cd backend
            npm install
            npm test
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependency]
      - run:
          name: frontend scan
          command: "cd frontend \nnpm install \nnpm audit fix --force --audit-level=critical\nnpm audit --audit-level=critical\n"
  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependency]
      - run:
          name: backend scan
          command: "cd backend\nnpm install \nnpm audit fix --force --audit-level=critical\nnpm audit fix --force --audit-level=critical\nnpm audit --audit-level=critical\n"
  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - install_ansible
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy                                     \
            --template-file .circleci/files/backend.yml                 \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"  \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"        \
            --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy                                     \
            --template-file .circleci/files/frontend.yml                 \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"  \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"        \
            --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances                                            \
            --query 'Reservations[*].Instances[*].PublicIpAddress'              \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"  \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environments:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_ansible
      - add_ssh_keys:
          fingerprints:
            - "a7:b7:03:67:9f:64:be:75:c2:11:69:68:fb:38:d5:18"
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environments
  run-migrations:
    docker:
      - image: cimg/node:14.8.0
    steps:
      - checkout
      - install_aws_cli
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully."  migrations_dump.txt
            then
            curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environments
      - revert-migrations
#   deploy-frontend:
#     docker:
#     # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#     # Here's where you will add some code to rollback on failure      
#   deploy-backend:
#     docker:
#     # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#     # Here's where you will add some code to rollback on failure  
#   smoke-test:
#     docker:
#     # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#     # Here's where you will add some code to rollback on failure  
#   cloudfront-update:
#     docker:
#     # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#     # Here's where you will add some code to rollback on failure  
# cleanup:
#   docker:
#   # Docker image here
#   steps:
#     # Checkout code from git
#     - run:
#         name: Get old stack workflow id
#         command: |
#           # your code here
#           export OldWorkflowID="the id here"
#           export STACKS=[] #put the list of stacks here
#     - run:
#         name: Remove old stacks and files
#         command: |
#           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#           then
#             # your code here
#           fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
    # - deploy-frontend:
    #     requires: [run-migrations]
    # - deploy-backend:
    #     requires: [run-migrations]
    # - smoke-test:
    #     requires: [deploy-backend, deploy-frontend]
    # - cloudfront-update:
    #     requires: [smoke-test]
    # - cleanup:
    #     requires: [cloudfront-update]
